
import time
import streamlit as st
import pandas as pd
from io import BytesIO
import os

EXCEL_FILE = "form_b_database.xlsx"
SHEET_NAME = "Sheet1"

# ЁЯОп Manually defined village list
MANUAL_VILLAGE_LIST = ["рдирд╛рдВрджрдЧрд╛рд╡ рдмреБ.", "рд▓рдХреНрд╖реНрдореАрдирдЧрд░", "рд╡рд╛рдШреЗрд░реЗ", "рдорд╛рд▓реБрдВрдЬреЗ", "рд╕рдордиреЗрд░реЗ", "рд╕реЛрдордЬ", "рдореЛрдЧрд░реЗ", "рдореБрдВрдвреЗрдЧрд╛рд╡", "рдзрд╛рдордгрдЧрд╛рд╡", "рдЦрдВрдмрд╛рд│реЗ", "рдмреЗрд│рдЧрд╛рд╡ рдд-рд╣рд╛рд│реЗ", "рдзрд╛рдордгреА", "рд╕рд╛рдХреБрд░", "рдШреЛрдЯреА рдЦреБрд░реНрдж", "рдкрд┐рдВрдкрд│рдЧрд╛рд╡ рдореЛрд░", "рджреЗрд╡рд│реЗ", "рджреМрдВрдбрдд", "рдЙрднрд╛рдбреЗ", "рдЙрдВрдмрд░рдХреЛрди", "рдХреГрд╖реНрдгрд╛рдирдЧрд░", "рдорд╛рдгрд┐рдХрдЦрд╛рдВрдм"]

VILLAGE_OPTIONS = MANUAL_VILLAGE_LIST + ["ЁЯФ╝ рдирд╡реАрди рдЧрд╛рд╡ рдЬреЛрдбрд╛..."]

# ЁЯУе Load or create Excel file
def load_data():
    if os.path.exists(EXCEL_FILE):
        return pd.read_excel(EXCEL_FILE, sheet_name=SHEET_NAME, dtype=str)
    else:
        return pd.DataFrame(columns=[
            "рдордВрдЬреБрд░реАрдзрд╛рд░рдХрд╛рдЪреЗ рдирд╛рд╡", "рдЧрд╛рд╡рд╛рдЪреЗ рдирд╛рд╡", "рднреБрдорд╛рдкрди рдХреНрд░рдорд╛рдВрдХ",
            "рдПрдХреБрдг рдХреНрд╖реЗрддреНрд░рдлрд│", "рдордВрдЬреБрд░реАрдЪреЗ рдХреНрд╖реЗрддреНрд░", "рдкреАрдХ"
        ])

def save_data(df):
    with pd.ExcelWriter(EXCEL_FILE, engine="openpyxl", mode="w") as writer:
        df.to_excel(writer, index=False, sheet_name=SHEET_NAME)

# ЁЯМЯ Title
st.title("ЁЯУД рдирд╡реАрди рдордВрдЬреБрд░реА рдлреЙрд░реНрдо")

df = load_data()

# ========== Add Form ==========
with st.form(key="add_form", clear_on_submit=True):
    col1, col2 = st.columns(2)
    with col1:
        name = st.text_input("ЁЯзС рдордВрдЬреБрд░реАрдзрд╛рд░рдХрд╛рдЪреЗ рдирд╛рд╡")
        selected_village = st.selectbox("ЁЯПб рдЧрд╛рд╡рд╛рдЪреЗ рдирд╛рд╡", VILLAGE_OPTIONS)
        if selected_village == "ЁЯФ╝ рдирд╡реАрди рдЧрд╛рд╡ рдЬреЛрдбрд╛...":
            village = st.text_input("тЮХ рдирд╡реАрди рдЧрд╛рд╡рд╛рдЪреЗ рдирд╛рд╡")
        else:
            village = selected_village
        survey_no = st.text_input("ЁЯз╛ рднреБрдорд╛рдкрди рдХреНрд░рдорд╛рдВрдХ")

    with col2:
        total_area = st.text_input("ЁЯМ╛ рдПрдХреБрдг рдХреНрд╖реЗрддреНрд░рдлрд│")
        approved_area = st.text_input("тЬЕ рдордВрдЬреБрд░реАрдЪреЗ рдХреНрд╖реЗрддреНрд░")
        crop = st.text_input("ЁЯМ▒ рдордВрдЬреБрд░ рдкрд┐рдХреЗ")

    submitted = st.form_submit_button("ЁЯТ╛ рд╕рдмрдорд┐рдЯ рдХрд░рд╛")

    if submitted:
        if not name.strip() or not village.strip():
            st.warning("рдХреГрдкрдпрд╛ рдирд╛рд╡ рд╡ рдЧрд╛рд╡ рдорд╛рд╣рд┐рддреА рднрд░рд╛.")
        else:
            new_record = {
                "рдордВрдЬреБрд░реАрдзрд╛рд░рдХрд╛рдЪреЗ рдирд╛рд╡": name.strip(),
                "рдЧрд╛рд╡рд╛рдЪреЗ рдирд╛рд╡": village.strip(),
                "рднреБрдорд╛рдкрди рдХреНрд░рдорд╛рдВрдХ": survey_no.strip(),
                "рдПрдХреБрдг рдХреНрд╖реЗрддреНрд░рдлрд│": total_area.strip(),
                "рдордВрдЬреБрд░реАрдЪреЗ рдХреНрд╖реЗрддреНрд░": approved_area.strip(),
                "рдкреАрдХ": crop.strip()
            }
            updated_df = pd.concat([df, pd.DataFrame([new_record])], ignore_index=True)
            save_data(updated_df)
            st.success(f"тЬЕ рд░реЗрдХреЙрд░реНрдб рд╕реЗрд╡реНрд╣ рдЭрд╛рд▓рд╛: {name}")
            time.sleep(2)
            st.rerun()

# ========== Display Saved Records ==========
df = load_data()
if not df.empty:
    st.subheader("ЁЯУЛ рд╕реЗрд╡реНрд╣ рдЭрд╛рд▓реЗрд▓реЗ рд░реЗрдХреЙрд░реНрдб:")
    st.dataframe(df, use_container_width=True)

    with st.expander("ЁЯЧСя╕П рд░реЗрдХреЙрд░реНрдб рдбрд┐рд▓реАрдЯ рдХрд░рд╛."):

        max_index = len(df) - 1
        row_to_delete = st.number_input("тЭМ рдбрд┐рд▓реАрдЯ рдХрд░рд╛рдпрдЪрд╛ рд░реЗрдХреЙрд░реНрдб рдХреНрд░рдорд╛рдВрдХ рд▓рд┐рд╣рд╛:", min_value=0, max_value=max_index,
                                        step=1)

        if st.button("тЬЕ рд░реЗрдХреЙрд░реНрдб рдбрд┐рд▓реАрдЯ рдХрд░рд╛"):
            if 0 <= row_to_delete <= max_index:
                df = df.drop(index=row_to_delete).reset_index(drop=True)
                save_data(df)
                st.success(f"тЬЕ рдХреНрд░рдорд╛рдВрдХ {row_to_delete} рдЕрд╕рд▓реЗрд▓рд╛ рд░реЗрдХреЙрд░реНрдб рдбрд┐рд▓реАрдЯ рдЭрд╛рд▓рд╛.")
                st.rerun()
            else:
                st.warning("тЭМ рдЕрд╡реИрдз рдХреНрд░рдорд╛рдВрдХ.")

    # ========== Download by Village ==========
    with st.expander("ЁЯУе рдЧрд╛рд╡рд╛рдиреБрд╕рд╛рд░ рд░реЗрдХреЙрд░реНрдб рдбрд╛рдЙрдирд▓реЛрдб рдХрд░рд╛"):
        available_villages = sorted(df["рдЧрд╛рд╡рд╛рдЪреЗ рдирд╛рд╡"].dropna().unique())
        selected_village = st.selectbox("ЁЯПШя╕П рдЧрд╛рд╡ рдирд┐рд╡рдбрд╛:", available_villages)

        filtered_df = df[df["рдЧрд╛рд╡рд╛рдЪреЗ рдирд╛рд╡"] == selected_village]
        if not filtered_df.empty:
            output = BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                filtered_df.to_excel(writer, index=False, sheet_name="Records")
            output.seek(0)

            st.download_button(
                label=f"тмЗя╕П {selected_village} рдЧрд╛рд╡рд╛рдЪреЗ рд░реЗрдХреЙрд░реНрдб рдбрд╛рдЙрдирд▓реЛрдб рдХрд░рд╛",
                data=output,
                file_name=f"{selected_village}_records.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
